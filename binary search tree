#include<stdio.h>
#include<stdlib.h>

struct Node{
    struct Node* left;
    int data;
    struct Node* right;
};
struct Node* createNewNode(int val){
 struct Node* temp
        = (struct Node*)malloc(
            sizeof(struct Node));
    temp->data = val;
    temp->left = NULL;
    temp->right =NULL;
}
struct Node* insert(struct Node* root,int val){
    if(root==NULL) return createNewNode(val);
    if (val < root->data) {
        root->left = insert(root->left, val);
    }
    else if (val > root->data) {
        root->right = insert(root->right, val);
    }
    return root;
}
void inOrder(struct Node* root){
    if (root != NULL) {
        inOrder(root->left);
        printf(" %d ", root->data);
        inOrder(root->right);
    }
}
void postOrder(struct Node* root){
    if (root != NULL) {
        postOrder(root->left);
        postOrder(root->right);
        printf(" %d ", root->data);
    }
}
 void preOrder(struct Node* root){
    if (root != NULL) {
        printf(" %d ", root->data);
        preOrder(root->left);
        preOrder(root->right);
    }
}

void main(){
    int d;
    struct Node* root =NULL;
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);
    printf("\n In-oder of binary tree::");
    inOrder(root);
    printf("\n Pre-oder of binary tree::");
    preOrder(root);
    printf("\n Post-oder of binary tree::");
    postOrder(root);
 
}
